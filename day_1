#include <stdio.h>
#include <stdlib.h>
#include <time.h>

//create and fill array:
int * create_and_fill_array_randomaly(int size);

//merge sort:
void merge(int * arr, int begin, int middle, int end);
void merge_sort(int * arr, int begin, int end);

//////binari_search
int binari_search(int arr[], int wanted, int low, int high);

////////quick_sort
void swap(int * a, int * b);
int partition(int arr[], int low, int high);
void quick_sort(int arr[], int low, int high);

int main()
{
    int size;
    printf("choose the size between 1 to 1000\n");
    scanf("%d", &size);
    int* arr = create_and_fill_array_randomaly(size);
    int sort;
    printf("choose 1 for quick sort or 2 for merge sort\n");
    scanf("%d", &sort);
    while(!(sort == 1 || sort == 2)){
        printf("your input are not legal. 1 for quick sort or 2 for merge sort\n");
        scanf("%d", &sort);
    }
    if(sort == 1)
        merge_sort(arr, 0, size);
        
    else 
        quick_sort(arr, 0, size-1);
    
	printf("\n after sort: \n");
    for(int i = 0 ; i < size ; ++i){
        printf("%d, ", arr[i]);
    }
	printf("\n");
	printf("wich number you want to search?\n");
	int wanted;
	scanf("%d", &wanted);
	int exist = binari_search(arr, wanted, 0, size-1);
	if(exist)
		printf("the number %d are exist in the array\n");
	else 
		printf("the number %d are NOT exist in the array\n");

    free(arr);
    printf("\n bye bye \n");
    return 0;
}

int * create_and_fill_array_randomaly(int size){
    int * arr = malloc(sizeof(int) * size);
    srand(time(NULL));
    int range = size * 10;
    for(int i = 0 ; i < size ; ++i)
        arr[i] = rand() % range;
    return arr;
}

////////quick_sort
void swap(int * a, int * b){
    int temp = *a;
    *a = *b;
    *b = temp;
}
int partition(int arr[], int low, int high){
    int pivot_idx = low + rand() % (high - low + 1);
    int pivot = arr[pivot_idx];
    swap(&arr[pivot_idx], &arr[high]); 
    pivot_idx = high;
    int i = low - 1;
    for(int j = low ; j <= high ; ++j){
        if(j == pivot_idx)continue;
        if(arr[j] < pivot){
            swap(&arr[++i], &arr[j]);
        }
    }
    swap(&arr[++i], &arr[pivot_idx]);
    return i;
}
void quick_sort(int arr[], int low, int high){
    if(low < high){
        int pivot_idx = partition(arr, low, high);
        quick_sort(arr, low, pivot_idx-1);
        quick_sort(arr, pivot_idx+1, high);
    }
}

//binari_search
int binari_search(int arr[], int wanted, int low, int high){
    if(wanted < arr[low] || wanted > arr[high])
        return 0;
    if(wanted == arr[low] || wanted == arr[high])
        return 1;
    if( (high-low) > 1){
        int middle = (high + low)/2;
        if(arr[middle] == wanted)return 1;
        if(arr[middle] < wanted)
            return binari_search(arr, wanted, middle + 1, high);
        return binari_search(arr, wanted, low, middle - 1);
    }
    return 0;
}

//merge sort
void merge(int * arr, int begin, int middle, int end){
    int* first_part = arr + begin;
    int* second_part = arr + middle;
    int size = end-begin;
    int auxilary_arr[size];
    int idx = 0;
    while( idx < size ){
        if( *first_part  <= *second_part ){
            auxilary_arr[idx++] = *(first_part++);
            if(first_part == arr + middle)
                break;
        }else{
            auxilary_arr[idx++] = *(second_part++);
            if(second_part == arr + end)
                break;
        }
    }

    while(first_part < arr + middle || second_part < arr+end){
        if(first_part < arr+middle){
            auxilary_arr[idx++] = *(first_part++);
            continue;
        }else{
            auxilary_arr[idx++] = *(second_part++);
        }
    }
    
    for(int i = 0 ; i < size ; ++i){
       arr[begin + i] = auxilary_arr[i];
    }
}
void merge_sort(int * arr, int begin, int end){
    if((end - begin)<=1)return;
    int middle = (begin + end)/2;
    merge_sort(arr, begin, middle);
    merge_sort(arr, middle, end);
    merge(arr,begin, middle, end);
}

